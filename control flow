# Write a function called greater_than that takes two integer inputs, x and y and returns the value that is greater. If x and y are equal, return the string "These numbers are the same"

def greater_than(x,y):
  if x > y:
    return x
  if y > x:
    return y
  if x == y:
    return "These numbers are the same"
    

# The nearby college, Calvin Coolidge’s Cool College (or 4C, as the locals call it) requires students to earn 120 credits to graduate. Write a function called graduation_reqs that takes an input credits and checks if the student has enough credits to graduate. If they do, return the string "You have enough credits to graduate!"

def graduation_reqs(credits):
  if credits >= 120:
    return "You have enough credits to graduate!"
    

# Call graduation_reqs with an input of 120 credits and print the result to the terminal. Can a student with 120 credits graduate from Calvin Coolidge’s Cool College?

print(graduation_reqs(120))


# Rewrite the graduation_reqs function so it takes two inputs, gpa and credits, and checks to see if a student meets both requirements using an and statement. If they do, return the string "You meet the requirements to graduate!"

def graduation_reqs(gpa, credits):
  if credits >= 120 and gpa >= 2.0:
    return "You meet the requirements to graduate!"
    

# Write a function called graduation_mailer that takes two inputs, gpa and credits and checks if a student either has 120 or more credits or a GPA 2.0 or higher and if so returns True.

def graduation_mailer(gpa,credits):
  if credits >= 120 or gpa >= 2.0:
    return True
    
 
# They want you to return to the first function you wrote, graduation_reqs, and add in several checks using and and not statements.

def graduation_reqs(gpa, credits):
  if (gpa >= 2.0) and (credits >= 120):
    return "You meet the requirements to graduate!"
  if (gpa >= 2.0) and not (credits >= 120):
    return "You do not have enough credits to graduate."
  if not (gpa >= 2.0) and (credits >= 120):
    return "Your GPA is not high enough to graduate."
    

# If a student is failing to meet both graduation requirements, they want the function to return: "You do not meet the GPA or the credit requirement for graduation." Use an else statement to add this to your function.

def graduation_reqs(gpa, credits):
  if (gpa >= 2.0) and (credits >= 120):
    return "You meet the requirements to graduate!"
  if (gpa >= 2.0) and not (credits >= 120):
    return "You do not have enough credits to graduate."
  if not (gpa >= 2.0) and (credits >= 120):
    return "Your GPA is not high enough to graduate."
  else:
    return "You do not meet the GPA or the credit requirement for graduation."
    

# Your function should be named grade_converter, take the input gpa, and convert the following GPAs: 4.0 or higher should return "A" 3.0 or higher should return "B" 2.0 or higher should return "C" 1.0 or higher should return "D" 0.0 or higher should return "F". You can do this by creating a variable called grade. Then, you should use elif statements to set grade to the appropriate letter grade for the gpa entered. At the end of the function, return grade.

def grade_converter(gpa):
  if gpa >= 4.0:
    grade = "A"
  elif gpa >= 3.0:
    grade = "B"
  elif gpa >= 2.0:
    grade = "C"
  elif gpa >= 1.0:
    grade = "D"
  else:
    grade = "F"
  return grade
  

# Try running it by entering raises_value_error() into the code editor and hitting run.
 
 def raises_value_error():
  raise ValueError
  
  
# Write a try statement and an except statement around the line of code that executes the function to catch a ValueError and make the error message print You raised a ValueError!
  
  def raises_value_error():
    raise ValueError
  
  try:
    raises_value_error()
  except ValueError:
    print ("You raised a ValueError")
 

# Write a function called applicant_selector which takes three inputs, gpa, ps_score, and ec_count. If the applicant meets the cutoff point for all three categories, have the function return the string: "This applicant should be accepted."

def applicant_selector(gpa, ps_score, ec_count):
  if (gpa >= 3.0) and (ps_score >= 90) and (ec_count >= 3):
    return "This applicant should be accepted."
    
    
# If an applicant meets the cutoff point for GPA and personal statement score, but not the extracurricular activity count, the function should return the string: "This applicant should be given an in-person interview."

def applicant_selector(gpa, ps_score, ec_count):
  if (gpa >= 3.0) and (ps_score >= 90) and (ec_count >= 3):
    return "This applicant should be accepted."
  elif (gpa >= 3.0) and (ps_score >= 90) and not (ec_count >= 3):
    return "This applicant should be given an in-person interview."
 
 
# Finally, for all other cases, the function should return the string: "This applicant should be rejected."

def applicant_selector(gpa, ps_score, ec_count):
  if (gpa >= 3.0) and (ps_score >= 90) and (ec_count >= 3):
    return "This applicant should be accepted."
  elif (gpa >= 3.0) and (ps_score >= 90) and not (ec_count >= 3):
    return "This applicant should be given an in-person interview."
  else:
    return "This applicant should be rejected."
